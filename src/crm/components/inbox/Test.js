import React, { useState } from "react";
import CustomTabs from "./CustomTabs";
import { Grid } from "@mui/material";
import HomeIcon from "@mui/icons-material/Home";
import InfoIcon from "@mui/icons-material/Info";
import ContactMailIcon from "@mui/icons-material/ContactMail";
import CustomList from "./CustomList";
import EmailCart from "./EmailCart";
import axios from "axios";
import api from "../../../services/api";
import TicketCart from "./TicketCart";
import { useSelector } from "react-redux";

const Test = () => {
  const passWord = useSelector((state) => state.LoginReducer.passWord);
  const userName = useSelector((state) => state.LoginReducer.userName);
  const [category, setCategory] = useState([]);
  const [subcategory, setSubcategory] = useState([]);
  const [dpData, setDpdata] = useState([]);
  const [ticketDetails, setTicketDetails] = useState();
  const [selectedCate, setSelectedCate] = useState("");
  const [selectedSubCat, setSelectedSubCat] = useState("");
  const [comment, setComment] = useState("");
  const [description, setDescription] = useState("");

  const handleComment = (e) => {
    const val = e.target.value;
    setComment(val);
  };

  const handleDescription = (e) => {
    const val = e.target.value;
    setDescription(val);
  };

  const handleCatChange = (e) => {
    const val = e.target.value;
    setSelectedCate(val);
  };
  const handleSubCatChange = (e) => {
    const val = e.target.value;
    setSelectedSubCat(val);
  };

  const tickets = {
    open: [
      {
        ticketId: "202411280000000008",
        createdDateTime: "2024-11-28T05:16:00Z",
        subject: "Quality Issues in Construction",
        sender: "vishal.jaiswal@gera.in",
        name: "Megha Jaiswal",
        conversationId:
          "AAQkAGI4MDZiNWIxLTRiZTctNDViMS1iMmIzLWJmYjgzZjZmN2E5MgAQALexUC6zMEcrlbh8g_-MPvI=",
        bodyPreview:
          "Dear Reshma,\r\n\r\nI am disappointed with the construction quality of my property in [Project Name]. The issues include [specific problems, e.g., water leakage, cracked walls, poor flooring, etc.]. These defects are unacceptable for a property of this value",
      },
    ],
    inprocess: [
      {
        ticketId: "202411270000000002",
        createdDateTime: "2024-11-27T07:06:01Z",
        subject: "Delay in Project Completion",
        sender: "vishal.jaiswal@gera.in",
        name: "Megha Jaiswal",
        conversationId:
          "AAQkAGI4MDZiNWIxLTRiZTctNDViMS1iMmIzLWJmYjgzZjZmN2E5MgAQAB_CQXr7tUk3pEmWiVbEmMQ=",
        bodyPreview:
          "Dear Paulson,\r\n\r\nPlease find attached agreement for your reference.\r\nThis comment was generated by a rule, which can be used to automate all kinds of routine tasks.\r\nGo to the Customize menu in the top right corner of your project to edit this rule.",
      },
    ],
    closed: [
      {
        ticketId: "202411270000000004",
        createdDateTime: "2024-11-27T05:26:50Z",
        subject: "Test",
        sender: "sumit.kathalkar@gera.in",
        conversationId:
          "AAQkAGI4MDZiNWIxLTRiZTctNDViMS1iMmIzLWJmYjgzZjZmN2E5MgAQAKPnIiyL7ehBqX7qtsS9nEc=",
        name: "Sweta Abhay Prabhu",
        bodyPreview:
          "Regards,\r\nSumit Kathalkar\r\nAsst Manager-IT\r\n\r\n\r\nThis communication is confidential and privileged and is directed to and for the use of the addressee only. The recipient if not the addressee should not use this message if erroneously received, and acc",
      },
      {
        ticketId: "202411270000000003",
        createdDateTime: "2024-11-27T05:26:50Z",
        subject: "Test",
        sender: "sumit.kathalkar@gera.in",
        name: "Vilan Vinayak Sawant",
        conversationId:
          "AAQkAGI4MDZiNWIxLTRiZTctNDViMS1iMmIzLWJmYjgzZjZmN2E5MgAQAKPnIiyL7ehBqX7qtsS9nEc=",
        bodyPreview:
          "Regards,\r\nSumit Kathalkar\r\nAsst Manager-IT\r\n\r\n\r\nThis communication is confidential and privileged and is directed to and for the use of the addressee only. The recipient if not the addressee should not use this message if erroneously received, and acc",
      },
    ],
  };

  const [emailCartData, setEmailCartData] = useState([]);

  const getAccessToken = async () => {
    const url = `/api/ticket/get-token`;

    try {
      const tokenData = (await api.get(url)).data;
      // console.log("###########access token:", tokenData.data.access_token);
      return tokenData;
    } catch (error) {
      return error;
    }
  };

  const getTicketDetails = async (ticketId) => {
    try {
      const url = `/api/ticket/get-ticket-details`;
      const formData = new FormData();
      formData.append("userName", userName);
      formData.append("passWord", passWord);
      formData.append("ticketId", ticketId);
      const res = (await api.post(url, formData)).data;
      console.log("resss", res);
      setCategory(res.response[0]?.typdata);
      setSubcategory(res.response[0]?.subtypdata);
      setDpdata(res.response[0]?.dpdata);
      setTicketDetails(res.response[0]?.ticketdata[0]);
      console.log("resese", res);
    } catch (error) {
      console.log("errsrd");
    }
  };

  const fetchMessagesByConversation = async (conversationId) => {
    try {
      //   setLoading(true); // Set loading state to true while fetching data
      //   setError(null); // Reset any previous errors

      const token = await getAccessToken(); // Get the access token
      console.log("token", token);
      const encodedConversationId = encodeURIComponent(conversationId); // URL encode the conversationId
      const url = `https://graph.microsoft.com/v1.0/users/c8fec0e4-c259-49c3-b4ff-64d31353a571/messages?$filter=conversationId eq '${encodedConversationId}'`;

      const response = await axios.get(url, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      console.log(response.data);

      // Update state with fetched messages
      setEmailCartData(response.data.value);
    } catch (err) {
      // Handle any errors
      //   setError(
      //     "Error fetching messages: " +
      //       (err.response ? err.response.data.error.message : err.message)
      //   );
    } finally {
      //   setLoading(false); // Set loading state to false when done
    }
  };

  const handleTicketClick = async (ticket, index) => {
    // alert(`Clicked on ticket: ${JSON.stringify(ticket)}`);
    const response = await fetchMessagesByConversation(ticket.conversationId);
    const res = await getTicketDetails(ticket.ticketId);
    console.log("response", response);
    // first api call for sap
    //second api call for graph api for messages
    // set message for emailCartData
  };

  // Styles using CSS-in-JS

  const dives =
    '<html><head>\r\n<meta http-equiv="Content-Type" content="text/html; charset=utf-8"><style type="text/css" style="display:none">\r\n<!--\r\np\r\n\t{margin-top:0;\r\n\tmargin-bottom:0}\r\n-->\r\n</style></head><body dir="ltr"><div class="elementToProof" style="font-family:Aptos,Aptos_EmbeddedFont,Aptos_MSFontService,Calibri,Helvetica,sans-serif; font-size:12pt; color:rgb(0,0,0)">Dear Vishal,</div><div class="elementToProof" style="font-family:Aptos,Aptos_EmbeddedFont,Aptos_MSFontService,Calibri,Helvetica,sans-serif; font-size:12pt; color:rgb(0,0,0)"><br></div><div class="elementToProof" style="font-family:Aptos,Aptos_EmbeddedFont,Aptos_MSFontService,Calibri,Helvetica,sans-serif; font-size:12pt; color:rgb(0,0,0)">I will check details with my construction team and update you project details.</div><div class="elementToProof" style="font-family:Aptos,Aptos_EmbeddedFont,Aptos_MSFontService,Calibri,Helvetica,sans-serif; font-size:12pt; color:rgb(0,0,0)">This comment was generated by a rule, which can be used to automate all kinds of routine tasks.&nbsp;</div><div class="elementToProof" style="font-family:Aptos,Aptos_EmbeddedFont,Aptos_MSFontService,Calibri,Helvetica,sans-serif; font-size:12pt; color:rgb(0,0,0)">Go to the Customize menu in the top right corner of your project to edit this rule.</div><div class="elementToProof" style="font-family:Aptos,Aptos_EmbeddedFont,Aptos_MSFontService,Calibri,Helvetica,sans-serif; font-size:12pt; color:rgb(0,0,0)"><br></div><div class="elementToProof" style="font-family:Aptos,Aptos_EmbeddedFont,Aptos_MSFontService,Calibri,Helvetica,sans-serif; font-size:12pt; color:rgb(0,0,0)">Regards,</div><div class="elementToProof" style="font-family:Aptos,Aptos_EmbeddedFont,Aptos_MSFontService,Calibri,Helvetica,sans-serif; font-size:12pt; color:rgb(0,0,0)">Paulson</div><div id="appendonsend"></div><hr tabindex="-1" style="display:inline-block; width:98%"><div id="divRplyFwdMsg" dir="ltr"><font face="Calibri, sans-serif" color="#000000" style="font-size:11pt"><b>From:</b> Vishal Jaiswal @ Gera IT &lt;vishal.jaiswal@gera.in&gt;<br><b>Sent:</b> Wednesday, November 27, 2024 12:24 PM<br><b>To:</b> Customer Support @ Gera &lt;customersupport@gera.in&gt;<br><b>Subject:</b> Delay in Project Completion</font> <div>&nbsp;</div></div><style>\r\n<!--\r\n@font-face\r\n\t{font-family:"Cambria Math"}\r\n@font-face\r\n\t{font-family:Calibri}\r\n@font-face\r\n\t{font-family:Aptos}\r\np.x_MsoNormal, li.x_MsoNormal, div.x_MsoNormal\r\n\t{margin:0cm;\r\n\tfont-size:11.0pt;\r\n\tfont-family:"Aptos",sans-serif}\r\nspan.x_EmailStyle17\r\n\t{font-family:"Aptos",sans-serif;\r\n\tcolor:windowtext}\r\n.x_MsoChpDefault\r\n\t{font-size:11.0pt}\r\n@page WordSection1\r\n\t{margin:72.0pt 72.0pt 72.0pt 72.0pt}\r\n-->\r\n</style><div lang="EN-IN" style="word-wrap:break-word"><div class="x_WordSection1"><p class="x_MsoNormal">Dear Paulson,</p><p class="x_MsoNormal">&nbsp;</p><p class="x_MsoNormal">I am writing to express my concern about the delay in the handover of my apartment, A 207 in your Planet of Joy project. </p><p class="x_MsoNormal">As per the agreement, the possession was scheduled for 01.11.2024, but it has not been handed over yet. </p><p class="x_MsoNormal">This delay is causing significant financial and emotional stress.<br>I request a clear update on the status of the project and the expected possession date.</p><p class="x_MsoNormal">Additionally, please inform me about the compensation for the delay as per RERA guidelines.</p><p class="x_MsoNormal">&nbsp;</p><p class="x_MsoNormal"><span style="">&nbsp;</span></p><p class="x_MsoNormal"><span style="">Thanks &amp; Regards,</span></p><p class="x_MsoNormal"><span style="">&nbsp;</span></p><p class="x_MsoNormal"><b><span style="">Vishal Jaiswal</span></b></p><p class="x_MsoNormal"><b><span style="">Mobile: </span></b><span style="">8805344099<b></b></span></p><p class="x_MsoNormal"><b><span style="">Email: </span></b><span style=""><a href="mailto:vishal.jaiswal@gera.in">vishal.jaiswal@gera.in</a><b></b></span></p><p class="x_MsoNormal"><span style="font-family:&quot;Calibri&quot;,sans-serif">&nbsp;</span></p><table class="x_MsoNormalTable" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100.0%; background:white"><tbody><tr><td style="padding:0cm 0cm 0cm 0cm"><div align="center"><table class="x_MsoNormalTable" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100.0%"><tbody><tr><td style="padding:0cm 0cm 0cm 0cm"><div align="center"><table class="x_MsoNormalTable" border="0" cellspacing="0" cellpadding="0" width="600" style="width:450.0pt; background:#F4F4F4"><tbody><tr><td width="100%" valign="top" style="width:100.0%; padding:0cm 0cm 0cm 0cm"><table class="x_MsoNormalTable" border="0" cellspacing="0" cellpadding="0" width="100%" style="width:100.0%"><tbody><tr><td width="600" style="width:450.0pt; padding:0cm 0cm 0cm 0cm"><p class="x_MsoNormal" align="center" style="text-align:center"><a href="https://ind01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fcluboutdo.gera.in%2F&amp;data=05%7C02%7Ccustomersupport%40gera.in%7C5f59bf74ac904f97196408dd0eb048ef%7Cde21737fd6b1425fac2167db0eec5c98%7C0%7C0%7C638682872490714041%7CUnknown%7CTWFpbGZsb3d8eyJFbXB0eU1hcGkiOnRydWUsIlYiOiIwLjAuMDAwMCIsIlAiOiJXaW4zMiIsIkFOIjoiTWFpbCIsIldUIjoyfQ%3D%3D%7C0%7C%7C%7C&amp;sdata=M%2F%2Bk%2B02xjy%2FwRXdV9RHik5QziEpg%2FNaAwE%2B3yxRf5sE%3D&amp;reserved=0" originalsrc="https://cluboutdo.gera.in/" shash="mok0p9FJWAKch7HeJg1ntJPnlK92M1CoQC9UfCC94beZ9Qyc3q877f5qXHT2KgDUn+D4VGJzLV60X14Y2KdYUa9Cn/BlNm80YCyKdt/ZKkVe4JS5ivHMQcanShPXX/MQ1VJfYVQ2/LpOE29cs1Eo4zl+jSQ+c5uWHcwYEyEGb3A=" target="_blank"><span style="font-family:&quot;Calibri&quot;,sans-serif; color:blue; text-decoration:none"><img border="0" width="601" height="181" id="x_Picture_x0020_1" alt="Image" data-outlook-trace="F:1|T:1" src="cid:image001.jpg@01DB40C6.8451FEB0" style="width:6.2604in; height:1.8854in"></span></a><span style="font-family:&quot;Calibri&quot;,sans-serif"></span></p></td></tr></tbody></table></td></tr></tbody></table></div></td></tr></tbody></table></div></td></tr></tbody></table><p class="x_MsoNormal"><span style="">&nbsp;</span></p><p class="x_MsoNormal">&nbsp;</p></div></div></body></html>';

  const tabData = [
    {
      label: "Open",
      content: (
        <Grid container spacing={3}>
          <Grid item md={4} sm={4} xl={4}>
            {" "}
            <CustomList
              tickets={tickets?.open}
              onTicketClick={handleTicketClick}
              listWrapperStyle={{
                margin: "20px auto",
                backgroundColor: "#f9f9f9",
                padding: "5px",
                borderRadius: "12px",
                boxShadow: "0 4px 8px rgba(0, 0, 0, 0.1)",
              }}
              listItemStyle={{
                "&:hover": {
                  backgroundColor: "#f0f0f0",
                },
              }}
              itemTextStyle={{
                "& .MuiTypography-primary": {
                  fontWeight: "bold",
                  color: "#333",
                },
                "& .MuiTypography-secondary": {
                  color: "#777",
                },
              }}
              emptyMessage="No tickets to show."
            />
          </Grid>
          <Grid item md={8} sm={8} xl={8}>
            {emailCartData.length === 0 && <h3>Please Select Ticket</h3>}
            {emailCartData?.length > 0 && (
              <TicketCart
                ticketDetails={ticketDetails}
                catOption={category}
                catLabel="Category"
                selectedCate={selectedCate}
                handleCatChange={handleCatChange}
                subCatOption={subcategory}
                subCatLabel={"Subcategory"}
                selectedSubCat={selectedSubCat}
                handleSubCatChange={handleSubCatChange}
                comment={comment}
                setComment={setComment}
                handleComment={handleComment}
                description={description}
                setDescription={setDescription}
                handleDescription={handleDescription}
                dpData={dpData}
              />
            )}
            {emailCartData?.length > 0 &&
              emailCartData?.map((email) => {
                return (
                  <EmailCart key={email.id} content={email?.body?.content} />
                );
              })}
          </Grid>
        </Grid>
      ),
      icon: <HomeIcon />,
    },
    {
      label: "In Progress",
      content: (
        <Grid container spacing={3}>
          <Grid item md={4} sm={4} xl={4}>
            {" "}
            <CustomList
              tickets={tickets?.inprocess}
              onTicketClick={handleTicketClick}
              listWrapperStyle={{
                // maxWidth: "600px",
                margin: "20px auto",
                backgroundColor: "#f9f9f9",
                padding: "5px",
                borderRadius: "12px",
                boxShadow: "0 4px 8px rgba(0, 0, 0, 0.1)",
              }}
              listItemStyle={{
                "&:hover": {
                  backgroundColor: "#f0f0f0",
                },
              }}
              itemTextStyle={{
                "& .MuiTypography-primary": {
                  fontWeight: "bold",
                  color: "#333",
                },
                "& .MuiTypography-secondary": {
                  color: "#777",
                },
              }}
              emptyMessage="No tickets to show."
            />
          </Grid>
          <Grid item md={8} sm={8} xl={8}>
            {emailCartData.length === 0 && <h3>Please Select Ticket</h3>}
            {emailCartData?.length > 0 && (
              <TicketCart ticketDetails={ticketDetails} />
            )}
            {emailCartData?.length > 0 &&
              emailCartData?.map((email) => {
                return (
                  <EmailCart key={email.id} content={email?.body?.content} />
                );
              })}
          </Grid>
        </Grid>
      ),
      icon: <InfoIcon />,
    },
    {
      label: "Closed",
      content: (
        <Grid container spacing={3}>
          <Grid item md={4} sm={4} xl={4}>
            {" "}
            <CustomList
              tickets={tickets?.closed}
              onTicketClick={handleTicketClick}
              renderTicketAction={(ticket, index) => (
                <></>
                // <Box>
                //   <IconButton
                //     edge="end"
                //     aria-label="delete"
                //     onClick={(e) => {
                //       e.stopPropagation(); // Prevent triggering ticket click
                //       handleDelete(ticket, index);
                //     }}
                //   >
                //     <DeleteIcon color="error" />
                //   </IconButton>
                //   <IconButton
                //     edge="end"
                //     aria-label="reply"
                //     onClick={(e) => {
                //       e.stopPropagation(); // Prevent triggering ticket click
                //       handleReply(ticket, index);
                //     }}
                //   >
                //     <ReplyIcon color="primary" />
                //   </IconButton>
                // </Box>
              )}
              listWrapperStyle={{
                // maxWidth: "600px",
                margin: "20px auto",
                backgroundColor: "#f9f9f9",
                padding: "5px",
                borderRadius: "12px",
                boxShadow: "0 4px 8px rgba(0, 0, 0, 0.1)",
              }}
              listItemStyle={{
                "&:hover": {
                  backgroundColor: "#f0f0f0",
                },
              }}
              itemTextStyle={{
                "& .MuiTypography-primary": {
                  fontWeight: "bold",
                  color: "#333",
                },
                "& .MuiTypography-secondary": {
                  color: "#777",
                },
              }}
              emptyMessage="No tickets to show."
            />
          </Grid>
          <Grid item md={8} sm={8} xl={8}>
            {/* <Grid item sx={5} md={5} xl={6}> */}

            {emailCartData?.length > 0 && (
              <TicketCart ticketDetails={ticketDetails} />
            )}
            {/* </Grid> */}
            {emailCartData.length === 0 && <h3>Please Select Ticket</h3>}
            {emailCartData?.length > 0 &&
              emailCartData?.map((email) => {
                return (
                  <EmailCart key={email.id} content={email?.body?.content} />
                );
              })}
          </Grid>
        </Grid>
      ),
      icon: <ContactMailIcon />,
    },
  ];

  const handleTabChange = (index) => {
    setEmailCartData([]);
    setTicketDetails([]);
    console.log("Active tab index:", index);
  };

  return (
    <div>
      <Grid container></Grid>

      <CustomTabs
        tabs={tabData}
        defaultTab={0}
        onChange={handleTabChange}
        variant="scrollable"
        // centered
        tabsWrapperStyle={{
          backgroundColor: "#f5f5f5",
          borderRadius: "8px",
          padding: "8px",
        }}
        tabStyle={{
          fontWeight: "bold",
          color: "#333",
          "&.Mui-selected": {
            color: "#1976d2",
          },
        }}
        contentWrapperStyle={{
          //   padding: "16px",
          border: "1px solid #ddd",
          borderRadius: "8px",
          backgroundColor: "#fff",
        }}
      />
    </div>
  );
};

export default Test;
